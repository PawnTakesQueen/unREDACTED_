H2 unREDACTED_ uses TOR to protect the security and anonymity of sources.
br
br
H2 Compose (Client)
br
| Upon hitting Submit, the client will begin formatting the message.  The format is
blockquote
  | /SUBJECT[subject content]/MESSAGE[message content]/ATTACHMENT[attachment content]
| The content of the subject, message, and attachment are modified so forward slashes and backslashes will add be prepended with a backslash.  An example of this would look like this
blockquote
  | /SUBJECTThis is a subject/MESSAGEForward Slash looks like this \/ and this is a backslash \\./ATTACHMENTprintf('Hello World');

| The formatted message is then encrypted with the server's 4096-bit PGP public key.
br
br
| After the message has been formatted and encrypted the client begins generating a 4096-bit PGP key pair using OpenPGP.js and a randomly generated 32 character passphrase.  As this takes large amount of CPU resources, the browser is almost guaranteed to freeze for a moment.  This is okay though, as the browser will unfreeze when the keypair is generated.
br
br
| Once the keypair has been generated, the public key of the client that was generated and the encrypted message are sent to the server in a POST request with message: [encrypted message] and pgp_pubkey: [generated PGP public key] as the parameters to 
b /api/messages
| .  The response will be the PGP encrypted 24 character id of the message generated by the server.  This will be in an object with id_pgp as the key and the encrypted id as the value.  This PGP encrypted id will then be decrypted using the private key that was generated.  The encryption for replies will be AES256 CBC encrypted using the SHA-256 hash of the id.
br
br
| The server will save the PGP encrypted message, a PGP encrypted id using its own public key, and a UTC timestamp of when the message was sent.
br
br
H2 Reading Messages and Replying (Host)
br
| There is a very specific protocol for the host of the server to decrypt messages and reply to them.  First, the host takes the PGP encrypted unread messages and PGP encrypted IDs and temporarily stores them on a USB drive.  This USB drive is then plugged into an air gapped computer along with a seperate USB drive with the PGP private key to decrypt the information.  The information is then decrypted and read by the host.
br
br
| When the host is ready to reply, they will create an AES256 CBC encrypted message using the SHA-256 hash of the id as the key and a lookup key, which is the SHA-512 hash of the id.  This lookup id is only used to find the correct message when the client looks for a reply.
br
br
| Before saving the reply to the USB drive, the USB drive is zeroed out.  This is to prevent unwanted/unneeded information from staying on the USB drive.
br
br
| When the host returns to the server, they will put the encrypted message and lookup key into the database.  The database will also save the UTC timestamp of when the reply was placed into the database.  After the information has been placed into the database, the USB drive is once again zeroed out.
br
br
H2 Replies (Client)
br
| When the user inputs the id of the message, looking for a reply, the client will do a SHA-512 hash of the id and send a GET request to /api/replies/[512-bit hex encoded hash], so an example could be
blockquote
  | /api/replies/dda06184b8855fa2cb92721e5d39b57bb8d2446901a05710295de8aeecbc614526f4c4e92493ddf503df6211c4457a0bf636913bc19b189ef17ec92c7441d827
| for the id frxVphLszaZ4FPwnqGhJbZWXvJDOFOCX.
br
br
| If a reply has been made, the server will respond with an object with the keys message and time.  The values will be the AES256 CBC encrypted message and the UTC timestamp of when the reply was placed into the database.
br
br
| Once the client has received the reply, it will take the id and perform a SHA-256 hash on it and use that hash to decrypt the reply.  The decrypted reply will then be printed on the screen for the user to read.
br
br
H2 No Backdoors Ever
br
| unREDACTED_ will never add backdoors and the source code will always remain open source under the BSD 2-Clause License.
